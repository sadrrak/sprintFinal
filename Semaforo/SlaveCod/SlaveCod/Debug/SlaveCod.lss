
SlaveCod.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000012  00800100  0000037c  00000410  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000037c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00800112  00800112  00000422  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000422  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000454  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000060  00000000  00000000  00000494  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000b1b  00000000  00000000  000004f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009a7  00000000  00000000  0000100f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003e6  00000000  00000000  000019b6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000019c  00000000  00000000  00001d9c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000516  00000000  00000000  00001f38  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000363  00000000  00000000  0000244e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  000027b1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__ctors_end>
   4:	0c 94 51 01 	jmp	0x2a2	; 0x2a2 <__vector_1>
   8:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
   c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  10:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  14:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  18:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  1c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  20:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  24:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  28:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  2c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  30:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  34:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  38:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__vector_14>
  3c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  40:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  44:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  48:	0c 94 1a 01 	jmp	0x234	; 0x234 <__vector_18>
  4c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  50:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  54:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  58:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  5c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  60:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  64:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  68:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  6c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  70:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  74:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  78:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  7c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  80:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  84:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  88:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  8c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  90:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  94:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  98:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  9c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a0:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a4:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a8:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  ac:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  b0:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>

000000b4 <__ctors_end>:
  b4:	11 24       	eor	r1, r1
  b6:	1f be       	out	0x3f, r1	; 63
  b8:	cf ef       	ldi	r28, 0xFF	; 255
  ba:	d8 e0       	ldi	r29, 0x08	; 8
  bc:	de bf       	out	0x3e, r29	; 62
  be:	cd bf       	out	0x3d, r28	; 61

000000c0 <__do_copy_data>:
  c0:	11 e0       	ldi	r17, 0x01	; 1
  c2:	a0 e0       	ldi	r26, 0x00	; 0
  c4:	b1 e0       	ldi	r27, 0x01	; 1
  c6:	ec e7       	ldi	r30, 0x7C	; 124
  c8:	f3 e0       	ldi	r31, 0x03	; 3
  ca:	02 c0       	rjmp	.+4      	; 0xd0 <__do_copy_data+0x10>
  cc:	05 90       	lpm	r0, Z+
  ce:	0d 92       	st	X+, r0
  d0:	a2 31       	cpi	r26, 0x12	; 18
  d2:	b1 07       	cpc	r27, r17
  d4:	d9 f7       	brne	.-10     	; 0xcc <__do_copy_data+0xc>

000000d6 <__do_clear_bss>:
  d6:	21 e0       	ldi	r18, 0x01	; 1
  d8:	a2 e1       	ldi	r26, 0x12	; 18
  da:	b1 e0       	ldi	r27, 0x01	; 1
  dc:	01 c0       	rjmp	.+2      	; 0xe0 <.do_clear_bss_start>

000000de <.do_clear_bss_loop>:
  de:	1d 92       	st	X+, r1

000000e0 <.do_clear_bss_start>:
  e0:	a6 31       	cpi	r26, 0x16	; 22
  e2:	b2 07       	cpc	r27, r18
  e4:	e1 f7       	brne	.-8      	; 0xde <.do_clear_bss_loop>
  e6:	0e 94 8e 01 	call	0x31c	; 0x31c <main>
  ea:	0c 94 bc 01 	jmp	0x378	; 0x378 <_exit>

000000ee <__bad_interrupt>:
  ee:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000f2 <__vector_14>:
ISR(USART0_RX_vect){
		
	semaforoEscravo(UDR0-'0');	//recebendo dado do mestre
}

ISR (TIMER0_COMPA_vect){
  f2:	1f 92       	push	r1
  f4:	0f 92       	push	r0
  f6:	0f b6       	in	r0, 0x3f	; 63
  f8:	0f 92       	push	r0
  fa:	11 24       	eor	r1, r1
  fc:	2f 93       	push	r18
  fe:	3f 93       	push	r19
 100:	4f 93       	push	r20
 102:	5f 93       	push	r21
 104:	6f 93       	push	r22
 106:	7f 93       	push	r23
 108:	8f 93       	push	r24
 10a:	9f 93       	push	r25
 10c:	af 93       	push	r26
 10e:	bf 93       	push	r27
 110:	ef 93       	push	r30
 112:	ff 93       	push	r31
	tempo_ms++;//incrementando a váriavel
 114:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <__data_end>
 118:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <__data_end+0x1>
 11c:	a0 91 14 01 	lds	r26, 0x0114	; 0x800114 <__data_end+0x2>
 120:	b0 91 15 01 	lds	r27, 0x0115	; 0x800115 <__data_end+0x3>
 124:	bc 01       	movw	r22, r24
 126:	cd 01       	movw	r24, r26
 128:	6f 5f       	subi	r22, 0xFF	; 255
 12a:	7f 4f       	sbci	r23, 0xFF	; 255
 12c:	8f 4f       	sbci	r24, 0xFF	; 255
 12e:	9f 4f       	sbci	r25, 0xFF	; 255
 130:	60 93 12 01 	sts	0x0112, r22	; 0x800112 <__data_end>
 134:	70 93 13 01 	sts	0x0113, r23	; 0x800113 <__data_end+0x1>
 138:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <__data_end+0x2>
 13c:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <__data_end+0x3>
	if(tempo_ms%500 == 0)// tempo_ms eh meio segundo? se sim, desliga o "shot" da camera
 140:	24 ef       	ldi	r18, 0xF4	; 244
 142:	31 e0       	ldi	r19, 0x01	; 1
 144:	40 e0       	ldi	r20, 0x00	; 0
 146:	50 e0       	ldi	r21, 0x00	; 0
 148:	0e 94 9a 01 	call	0x334	; 0x334 <__udivmodsi4>
 14c:	67 2b       	or	r22, r23
 14e:	68 2b       	or	r22, r24
 150:	69 2b       	or	r22, r25
 152:	19 f4       	brne	.+6      	; 0x15a <__vector_14+0x68>
		PORTD &= 0b11111110; //desligando a camera 
 154:	8b b1       	in	r24, 0x0b	; 11
 156:	8e 7f       	andi	r24, 0xFE	; 254
 158:	8b b9       	out	0x0b, r24	; 11
}
 15a:	ff 91       	pop	r31
 15c:	ef 91       	pop	r30
 15e:	bf 91       	pop	r27
 160:	af 91       	pop	r26
 162:	9f 91       	pop	r25
 164:	8f 91       	pop	r24
 166:	7f 91       	pop	r23
 168:	6f 91       	pop	r22
 16a:	5f 91       	pop	r21
 16c:	4f 91       	pop	r20
 16e:	3f 91       	pop	r19
 170:	2f 91       	pop	r18
 172:	0f 90       	pop	r0
 174:	0f be       	out	0x3f, r0	; 63
 176:	0f 90       	pop	r0
 178:	1f 90       	pop	r1
 17a:	18 95       	reti

0000017c <semaforoPedestre>:
ISR (INT0_vect){	
		cameraSemaforo(); // chamando funcao dentro da interrupcao p verificar se passou veículo no vermelho			
}

void semaforoPedestre( int8_t aux){	
	if(aux>3){
 17c:	84 30       	cpi	r24, 0x04	; 4
 17e:	3c f0       	brlt	.+14     	; 0x18e <semaforoPedestre+0x12>
		PORTC &= 0b1111101;
 180:	88 b1       	in	r24, 0x08	; 8
 182:	8d 77       	andi	r24, 0x7D	; 125
 184:	88 b9       	out	0x08, r24	; 8
		PORTC |= 0b0000100;	//C2 verde 	(escravo) vermelho (mestre)
 186:	88 b1       	in	r24, 0x08	; 8
 188:	84 60       	ori	r24, 0x04	; 4
 18a:	88 b9       	out	0x08, r24	; 8
 18c:	08 95       	ret
	}
	else{
		PORTC |= 0b0000010 ; //C1 vermelho (escravo) verde(mestre)
 18e:	88 b1       	in	r24, 0x08	; 8
 190:	82 60       	ori	r24, 0x02	; 2
 192:	88 b9       	out	0x08, r24	; 8
		PORTC &= 0b1111011;		
 194:	88 b1       	in	r24, 0x08	; 8
 196:	8b 77       	andi	r24, 0x7B	; 123
 198:	88 b9       	out	0x08, r24	; 8
 19a:	08 95       	ret

0000019c <acionaSinal>:
	}
}
void acionaSinal(int8_t data){	//Recebe a posição de ESTADOS[] e realiza a operação de ativar o buzzer ou não
	if( data== 7 || data== 8)
 19c:	87 50       	subi	r24, 0x07	; 7
 19e:	82 30       	cpi	r24, 0x02	; 2
 1a0:	20 f4       	brcc	.+8      	; 0x1aa <acionaSinal+0xe>
		PORTC |= 0b0000001; //aciona C0 como saída de sinal
 1a2:	88 b1       	in	r24, 0x08	; 8
 1a4:	81 60       	ori	r24, 0x01	; 1
 1a6:	88 b9       	out	0x08, r24	; 8
 1a8:	08 95       	ret
	else
		PORTC &= 0b1111110 ;	//desativa C0	
 1aa:	88 b1       	in	r24, 0x08	; 8
 1ac:	8e 77       	andi	r24, 0x7E	; 126
 1ae:	88 b9       	out	0x08, r24	; 8
 1b0:	08 95       	ret

000001b2 <semaforoEscravo>:
    while (1) 
    {
		
	}
}
void semaforoEscravo(int8_t received){
 1b2:	ff 92       	push	r15
 1b4:	0f 93       	push	r16
 1b6:	1f 93       	push	r17
 1b8:	cf 93       	push	r28
 1ba:	df 93       	push	r29
 1bc:	cd b7       	in	r28, 0x3d	; 61
 1be:	de b7       	in	r29, 0x3e	; 62
 1c0:	62 97       	sbiw	r28, 0x12	; 18
 1c2:	0f b6       	in	r0, 0x3f	; 63
 1c4:	f8 94       	cli
 1c6:	de bf       	out	0x3e, r29	; 62
 1c8:	0f be       	out	0x3f, r0	; 63
 1ca:	cd bf       	out	0x3d, r28	; 61
 1cc:	f8 2e       	mov	r15, r24
	
	int16_t estados[9]={0b011110000,0b001110000,0b000110000,0b000010000,0b000001111,0b000000111,0b000000011,0b000000001,0b100000000};
 1ce:	82 e1       	ldi	r24, 0x12	; 18
 1d0:	e0 e0       	ldi	r30, 0x00	; 0
 1d2:	f1 e0       	ldi	r31, 0x01	; 1
 1d4:	de 01       	movw	r26, r28
 1d6:	11 96       	adiw	r26, 0x01	; 1
 1d8:	01 90       	ld	r0, Z+
 1da:	0d 92       	st	X+, r0
 1dc:	8a 95       	dec	r24
 1de:	e1 f7       	brne	.-8      	; 0x1d8 <semaforoEscravo+0x26>
	PORTB= estados[received] & 0b011111111;	//Mascara and apagando o led correspondente ao estado
 1e0:	0f 2d       	mov	r16, r15
 1e2:	00 0f       	add	r16, r16
 1e4:	11 0b       	sbc	r17, r17
 1e6:	81 e0       	ldi	r24, 0x01	; 1
 1e8:	90 e0       	ldi	r25, 0x00	; 0
 1ea:	8c 0f       	add	r24, r28
 1ec:	9d 1f       	adc	r25, r29
 1ee:	08 0f       	add	r16, r24
 1f0:	19 1f       	adc	r17, r25
 1f2:	f8 01       	movw	r30, r16
 1f4:	80 81       	ld	r24, Z
 1f6:	85 b9       	out	0x05, r24	; 5
	acionaSinal(received);		//Aciona buzzer
 1f8:	8f 2d       	mov	r24, r15
 1fa:	0e 94 ce 00 	call	0x19c	; 0x19c <acionaSinal>
	semaforoPedestre(received);
 1fe:	8f 2d       	mov	r24, r15
 200:	0e 94 be 00 	call	0x17c	; 0x17c <semaforoPedestre>
	if(estados[received] & 0b100000000)
 204:	f8 01       	movw	r30, r16
 206:	80 81       	ld	r24, Z
 208:	91 81       	ldd	r25, Z+1	; 0x01
 20a:	90 ff       	sbrs	r25, 0
 20c:	04 c0       	rjmp	.+8      	; 0x216 <semaforoEscravo+0x64>
		PORTD |= 0b10000000;	//ligando amarelo
 20e:	8b b1       	in	r24, 0x0b	; 11
 210:	80 68       	ori	r24, 0x80	; 128
 212:	8b b9       	out	0x0b, r24	; 11
 214:	03 c0       	rjmp	.+6      	; 0x21c <semaforoEscravo+0x6a>
	else
		PORTD &= 0b01111111;	//apagando amarelo
 216:	8b b1       	in	r24, 0x0b	; 11
 218:	8f 77       	andi	r24, 0x7F	; 127
 21a:	8b b9       	out	0x0b, r24	; 11
	
}
 21c:	62 96       	adiw	r28, 0x12	; 18
 21e:	0f b6       	in	r0, 0x3f	; 63
 220:	f8 94       	cli
 222:	de bf       	out	0x3e, r29	; 62
 224:	0f be       	out	0x3f, r0	; 63
 226:	cd bf       	out	0x3d, r28	; 61
 228:	df 91       	pop	r29
 22a:	cf 91       	pop	r28
 22c:	1f 91       	pop	r17
 22e:	0f 91       	pop	r16
 230:	ff 90       	pop	r15
 232:	08 95       	ret

00000234 <__vector_18>:

ISR(USART0_RX_vect){
 234:	1f 92       	push	r1
 236:	0f 92       	push	r0
 238:	0f b6       	in	r0, 0x3f	; 63
 23a:	0f 92       	push	r0
 23c:	11 24       	eor	r1, r1
 23e:	2f 93       	push	r18
 240:	3f 93       	push	r19
 242:	4f 93       	push	r20
 244:	5f 93       	push	r21
 246:	6f 93       	push	r22
 248:	7f 93       	push	r23
 24a:	8f 93       	push	r24
 24c:	9f 93       	push	r25
 24e:	af 93       	push	r26
 250:	bf 93       	push	r27
 252:	ef 93       	push	r30
 254:	ff 93       	push	r31
		
	semaforoEscravo(UDR0-'0');	//recebendo dado do mestre
 256:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 25a:	80 53       	subi	r24, 0x30	; 48
 25c:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <semaforoEscravo>
}
 260:	ff 91       	pop	r31
 262:	ef 91       	pop	r30
 264:	bf 91       	pop	r27
 266:	af 91       	pop	r26
 268:	9f 91       	pop	r25
 26a:	8f 91       	pop	r24
 26c:	7f 91       	pop	r23
 26e:	6f 91       	pop	r22
 270:	5f 91       	pop	r21
 272:	4f 91       	pop	r20
 274:	3f 91       	pop	r19
 276:	2f 91       	pop	r18
 278:	0f 90       	pop	r0
 27a:	0f be       	out	0x3f, r0	; 63
 27c:	0f 90       	pop	r0
 27e:	1f 90       	pop	r1
 280:	18 95       	reti

00000282 <cameraSemaforo>:
	else
		PORTC &= 0b1111110 ;	//desativa C0	
}

void cameraSemaforo(){ //Camera que capta se algum veículo passou no vermelho
		if(PORTB==0b011110000 || PORTB==0b001110000 || PORTB==0b000110000 || PORTB==0b000010000)
 282:	85 b1       	in	r24, 0x05	; 5
 284:	80 3f       	cpi	r24, 0xF0	; 240
 286:	49 f0       	breq	.+18     	; 0x29a <cameraSemaforo+0x18>
 288:	85 b1       	in	r24, 0x05	; 5
 28a:	80 37       	cpi	r24, 0x70	; 112
 28c:	31 f0       	breq	.+12     	; 0x29a <cameraSemaforo+0x18>
 28e:	85 b1       	in	r24, 0x05	; 5
 290:	80 33       	cpi	r24, 0x30	; 48
 292:	19 f0       	breq	.+6      	; 0x29a <cameraSemaforo+0x18>
 294:	85 b1       	in	r24, 0x05	; 5
 296:	80 31       	cpi	r24, 0x10	; 16
 298:	19 f4       	brne	.+6      	; 0x2a0 <cameraSemaforo+0x1e>
			PORTD |= 0b00000001;	//aciona camera	
 29a:	8b b1       	in	r24, 0x0b	; 11
 29c:	81 60       	ori	r24, 0x01	; 1
 29e:	8b b9       	out	0x0b, r24	; 11
 2a0:	08 95       	ret

000002a2 <__vector_1>:
	tempo_ms++;//incrementando a váriavel
	if(tempo_ms%500 == 0)// tempo_ms eh meio segundo? se sim, desliga o "shot" da camera
		PORTD &= 0b11111110; //desligando a camera 
}

ISR (INT0_vect){	
 2a2:	1f 92       	push	r1
 2a4:	0f 92       	push	r0
 2a6:	0f b6       	in	r0, 0x3f	; 63
 2a8:	0f 92       	push	r0
 2aa:	11 24       	eor	r1, r1
 2ac:	2f 93       	push	r18
 2ae:	3f 93       	push	r19
 2b0:	4f 93       	push	r20
 2b2:	5f 93       	push	r21
 2b4:	6f 93       	push	r22
 2b6:	7f 93       	push	r23
 2b8:	8f 93       	push	r24
 2ba:	9f 93       	push	r25
 2bc:	af 93       	push	r26
 2be:	bf 93       	push	r27
 2c0:	ef 93       	push	r30
 2c2:	ff 93       	push	r31
		cameraSemaforo(); // chamando funcao dentro da interrupcao p verificar se passou veículo no vermelho			
 2c4:	0e 94 41 01 	call	0x282	; 0x282 <cameraSemaforo>
}
 2c8:	ff 91       	pop	r31
 2ca:	ef 91       	pop	r30
 2cc:	bf 91       	pop	r27
 2ce:	af 91       	pop	r26
 2d0:	9f 91       	pop	r25
 2d2:	8f 91       	pop	r24
 2d4:	7f 91       	pop	r23
 2d6:	6f 91       	pop	r22
 2d8:	5f 91       	pop	r21
 2da:	4f 91       	pop	r20
 2dc:	3f 91       	pop	r19
 2de:	2f 91       	pop	r18
 2e0:	0f 90       	pop	r0
 2e2:	0f be       	out	0x3f, r0	; 63
 2e4:	0f 90       	pop	r0
 2e6:	1f 90       	pop	r1
 2e8:	18 95       	reti

000002ea <configRegSlave>:
		
}

void configRegSlave(){
	//Para INT0
	EICRA= 0b00000010;	//interrupção externa INT0 na borda de descida
 2ea:	82 e0       	ldi	r24, 0x02	; 2
 2ec:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <__TEXT_REGION_LENGTH__+0x7f8069>
	EIMSK= 0b00000001; //habilitação das interrupção externa INT0
 2f0:	91 e0       	ldi	r25, 0x01	; 1
 2f2:	9d bb       	out	0x1d, r25	; 29
	
	//TIMER0
	TCCR0A= 0b00000010;
 2f4:	84 bd       	out	0x24, r24	; 36
	TCCR0B= 0b00000011; //ligando TC0 com prescaler= 64
 2f6:	93 e0       	ldi	r25, 0x03	; 3
 2f8:	95 bd       	out	0x25, r25	; 37
	OCR0A= 249; //define um limite de contagem para TC0
 2fa:	99 ef       	ldi	r25, 0xF9	; 249
 2fc:	97 bd       	out	0x27, r25	; 39
	TIMSK0= 0b00000010; //habilitando a interrupção na igualdade de OCR0A. A interrrupção chega em 1ms (64*(249+1)/16M Hz)
 2fe:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7f806e>
	
	//Usart Config
	UBRR0H= (unsigned char)(MYUBRR>>8); //ajusta taxa de transmissão, parte alta
 302:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
	UBRR0L= (unsigned char)MYUBRR; //ajusta a taxa de transmissão, parte baixa
 306:	8f ef       	ldi	r24, 0xFF	; 255
 308:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
	UCSR0B= (1<<RXCIE0)|(1<<RXEN0)|(1<<TXEN0); //habilitando interrupção do receptor, habilita transmissor e receptor
 30c:	88 e9       	ldi	r24, 0x98	; 152
 30e:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
	UCSR0C= (3<<UCSZ00); //ajuste de formato do frame 8 bits de dados, 1 de parada, no parity
 312:	86 e0       	ldi	r24, 0x06	; 6
 314:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
	
	sei();//habilitando as interrupções
 318:	78 94       	sei
 31a:	08 95       	ret

0000031c <main>:

uint8_t flagShot=0;
uint32_t tempo_ms=0;
int main(void)
{
    DDRB=0xff; //hablitando todos os pinos da porta B como saída
 31c:	8f ef       	ldi	r24, 0xFF	; 255
 31e:	84 b9       	out	0x04, r24	; 4
	DDRD=0x81; //habilitando o pno d7 e d0 como saída amarelo e camera
 320:	81 e8       	ldi	r24, 0x81	; 129
 322:	8a b9       	out	0x0a, r24	; 10
	DDRC=0b0000111; //c6 entrada c2..c0 saída
 324:	87 e0       	ldi	r24, 0x07	; 7
 326:	87 b9       	out	0x07, r24	; 7
	PORTB=0x00; //Iniciando desligadas ja que depende da info do mestre
 328:	15 b8       	out	0x05, r1	; 5
	PORTD=0x04; //amarelo desligado e d0 desligado (camera) e d2 em NAA (borda de descida para carro que passa no vermelho)
 32a:	84 e0       	ldi	r24, 0x04	; 4
 32c:	8b b9       	out	0x0b, r24	; 11
	//PORTC=0b1000000;
	configRegSlave();	
 32e:	0e 94 75 01 	call	0x2ea	; 0x2ea <configRegSlave>
 332:	ff cf       	rjmp	.-2      	; 0x332 <main+0x16>

00000334 <__udivmodsi4>:
 334:	a1 e2       	ldi	r26, 0x21	; 33
 336:	1a 2e       	mov	r1, r26
 338:	aa 1b       	sub	r26, r26
 33a:	bb 1b       	sub	r27, r27
 33c:	fd 01       	movw	r30, r26
 33e:	0d c0       	rjmp	.+26     	; 0x35a <__udivmodsi4_ep>

00000340 <__udivmodsi4_loop>:
 340:	aa 1f       	adc	r26, r26
 342:	bb 1f       	adc	r27, r27
 344:	ee 1f       	adc	r30, r30
 346:	ff 1f       	adc	r31, r31
 348:	a2 17       	cp	r26, r18
 34a:	b3 07       	cpc	r27, r19
 34c:	e4 07       	cpc	r30, r20
 34e:	f5 07       	cpc	r31, r21
 350:	20 f0       	brcs	.+8      	; 0x35a <__udivmodsi4_ep>
 352:	a2 1b       	sub	r26, r18
 354:	b3 0b       	sbc	r27, r19
 356:	e4 0b       	sbc	r30, r20
 358:	f5 0b       	sbc	r31, r21

0000035a <__udivmodsi4_ep>:
 35a:	66 1f       	adc	r22, r22
 35c:	77 1f       	adc	r23, r23
 35e:	88 1f       	adc	r24, r24
 360:	99 1f       	adc	r25, r25
 362:	1a 94       	dec	r1
 364:	69 f7       	brne	.-38     	; 0x340 <__udivmodsi4_loop>
 366:	60 95       	com	r22
 368:	70 95       	com	r23
 36a:	80 95       	com	r24
 36c:	90 95       	com	r25
 36e:	9b 01       	movw	r18, r22
 370:	ac 01       	movw	r20, r24
 372:	bd 01       	movw	r22, r26
 374:	cf 01       	movw	r24, r30
 376:	08 95       	ret

00000378 <_exit>:
 378:	f8 94       	cli

0000037a <__stop_program>:
 37a:	ff cf       	rjmp	.-2      	; 0x37a <__stop_program>
