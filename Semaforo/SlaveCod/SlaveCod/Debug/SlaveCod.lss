
SlaveCod.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000012  00800100  00000248  000002bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000248  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000002ce  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000300  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000048  00000000  00000000  00000340  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000a98  00000000  00000000  00000388  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000989  00000000  00000000  00000e20  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000037f  00000000  00000000  000017a9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000dc  00000000  00000000  00001b28  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000004d5  00000000  00000000  00001c04  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000001cd  00000000  00000000  000020d9  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000038  00000000  00000000  000022a6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__ctors_end>
   4:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
   8:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
   c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  10:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  14:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  18:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  1c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  20:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  24:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  28:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  2c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  30:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  34:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  38:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  3c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  40:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  44:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  48:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__vector_18>
  4c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  50:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  54:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  58:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  5c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  60:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  64:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  68:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  6c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  70:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  74:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  78:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  7c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  80:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  84:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  88:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  8c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  90:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  94:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  98:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  9c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  a0:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  a4:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  a8:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  ac:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  b0:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>

000000b4 <__ctors_end>:
  b4:	11 24       	eor	r1, r1
  b6:	1f be       	out	0x3f, r1	; 63
  b8:	cf ef       	ldi	r28, 0xFF	; 255
  ba:	d8 e0       	ldi	r29, 0x08	; 8
  bc:	de bf       	out	0x3e, r29	; 62
  be:	cd bf       	out	0x3d, r28	; 61

000000c0 <__do_copy_data>:
  c0:	11 e0       	ldi	r17, 0x01	; 1
  c2:	a0 e0       	ldi	r26, 0x00	; 0
  c4:	b1 e0       	ldi	r27, 0x01	; 1
  c6:	e8 e4       	ldi	r30, 0x48	; 72
  c8:	f2 e0       	ldi	r31, 0x02	; 2
  ca:	02 c0       	rjmp	.+4      	; 0xd0 <__do_copy_data+0x10>
  cc:	05 90       	lpm	r0, Z+
  ce:	0d 92       	st	X+, r0
  d0:	a2 31       	cpi	r26, 0x12	; 18
  d2:	b1 07       	cpc	r27, r17
  d4:	d9 f7       	brne	.-10     	; 0xcc <__do_copy_data+0xc>
  d6:	0e 94 71 00 	call	0xe2	; 0xe2 <main>
  da:	0c 94 22 01 	jmp	0x244	; 0x244 <_exit>

000000de <__bad_interrupt>:
  de:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000e2 <main>:
void semaforoEscravo(int8_t );
void cameraSemaforo();
void semaforoPedestre(int8_t);
int main(void)
{
    DDRB=0xff; //hablitando todos os pinos da porta B como saída
  e2:	8f ef       	ldi	r24, 0xFF	; 255
  e4:	84 b9       	out	0x04, r24	; 4
	DDRD=0x81; //habilitando o pno d7 e d0 como saída amarelo e camera
  e6:	91 e8       	ldi	r25, 0x81	; 129
  e8:	9a b9       	out	0x0a, r25	; 10
	DDRC=0b0000111; //c6 entrada c2..c0 saída
  ea:	97 e0       	ldi	r25, 0x07	; 7
  ec:	97 b9       	out	0x07, r25	; 7
	PORTB=0x00; //Iniciando desligadas ja que depende da info do mestre
  ee:	15 b8       	out	0x05, r1	; 5
	PORTD=0x00; //amarelo desligado e d0 desligado (camera)
  f0:	1b b8       	out	0x0b, r1	; 11
	PORTC=0b1000000;//borda de descida para carro que passa no vermelho
  f2:	90 e4       	ldi	r25, 0x40	; 64
  f4:	98 b9       	out	0x08, r25	; 8
	//Usart Config
	UBRR0H= (unsigned char)(MYUBRR>>8); //ajusta taxa de transmissão, parte alta
  f6:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
	UBRR0L= (unsigned char)MYUBRR; //ajusta a taxa de transmissão, parte baixa
  fa:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
	UCSR0B= (1<<RXCIE0)|(1<<RXEN0)|(1<<TXEN0); //habilitando interrupção do receptor, habilita transmissor e receptor
  fe:	88 e9       	ldi	r24, 0x98	; 152
 100:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
	UCSR0C= (3<<UCSZ00); //ajuste de formato do frame 8 bits de dados, 1 de parada, no parity
 104:	86 e0       	ldi	r24, 0x06	; 6
 106:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
	
	sei();//habilitando as interrupções
 10a:	78 94       	sei
 10c:	ff cf       	rjmp	.-2      	; 0x10c <main+0x2a>

0000010e <semaforoPedestre>:
		
	semaforoEscravo(UDR0-'0');	
}

void semaforoPedestre( int8_t aux){	
	if(aux>3){
 10e:	84 30       	cpi	r24, 0x04	; 4
 110:	3c f0       	brlt	.+14     	; 0x120 <semaforoPedestre+0x12>
		PORTC &= 0b1111101;
 112:	88 b1       	in	r24, 0x08	; 8
 114:	8d 77       	andi	r24, 0x7D	; 125
 116:	88 b9       	out	0x08, r24	; 8
		PORTC |= 0b0000100;	//C2 verde 	(escravo) vermelho (mestre)
 118:	88 b1       	in	r24, 0x08	; 8
 11a:	84 60       	ori	r24, 0x04	; 4
 11c:	88 b9       	out	0x08, r24	; 8
 11e:	08 95       	ret
	}
	else{
		PORTC |= 0b0000010 ; //C1 vermelho (escravo) verde(mestre)
 120:	88 b1       	in	r24, 0x08	; 8
 122:	82 60       	ori	r24, 0x02	; 2
 124:	88 b9       	out	0x08, r24	; 8
		PORTC &= 0b1111011;		
 126:	88 b1       	in	r24, 0x08	; 8
 128:	8b 77       	andi	r24, 0x7B	; 123
 12a:	88 b9       	out	0x08, r24	; 8
 12c:	08 95       	ret

0000012e <acionaSinal>:
	}
}
void acionaSinal(int8_t data){	//Recebe a posição de ESTADOS[] e realiza a operação de ativar o buzzer ou não
	if( data== 7 || data== 8)
 12e:	87 50       	subi	r24, 0x07	; 7
 130:	82 30       	cpi	r24, 0x02	; 2
 132:	20 f4       	brcc	.+8      	; 0x13c <acionaSinal+0xe>
		PORTC |= 0b0000001; //aciona C0 como saída de sinal
 134:	88 b1       	in	r24, 0x08	; 8
 136:	81 60       	ori	r24, 0x01	; 1
 138:	88 b9       	out	0x08, r24	; 8
 13a:	08 95       	ret
	else
		PORTC &= 0b1111110 ;	//desativa C0	
 13c:	88 b1       	in	r24, 0x08	; 8
 13e:	8e 77       	andi	r24, 0x7E	; 126
 140:	88 b9       	out	0x08, r24	; 8
 142:	08 95       	ret

00000144 <cameraSemaforo>:
}

void cameraSemaforo(){ //Camera que capta se algum veículo passou no vermelho
	
	if(PORTB==0b011110000 || PORTB==0b001110000 || PORTB==0b000110000 || PORTB==0b000010000){
 144:	85 b1       	in	r24, 0x05	; 5
 146:	80 3f       	cpi	r24, 0xF0	; 240
 148:	49 f0       	breq	.+18     	; 0x15c <cameraSemaforo+0x18>
 14a:	85 b1       	in	r24, 0x05	; 5
 14c:	80 37       	cpi	r24, 0x70	; 112
 14e:	31 f0       	breq	.+12     	; 0x15c <cameraSemaforo+0x18>
 150:	85 b1       	in	r24, 0x05	; 5
 152:	80 33       	cpi	r24, 0x30	; 48
 154:	19 f0       	breq	.+6      	; 0x15c <cameraSemaforo+0x18>
 156:	85 b1       	in	r24, 0x05	; 5
 158:	80 31       	cpi	r24, 0x10	; 16
 15a:	49 f4       	brne	.+18     	; 0x16e <cameraSemaforo+0x2a>
		if((PINC & 0b1000000) ==0)
 15c:	36 99       	sbic	0x06, 6	; 6
 15e:	04 c0       	rjmp	.+8      	; 0x168 <cameraSemaforo+0x24>
			PORTD |= 0b00000001;	//aciona camera			
 160:	8b b1       	in	r24, 0x0b	; 11
 162:	81 60       	ori	r24, 0x01	; 1
 164:	8b b9       	out	0x0b, r24	; 11
 166:	08 95       	ret
		else
			PORTD &= 0b11111110;//camera desativada
 168:	8b b1       	in	r24, 0x0b	; 11
 16a:	8e 7f       	andi	r24, 0xFE	; 254
 16c:	8b b9       	out	0x0b, r24	; 11
 16e:	08 95       	ret

00000170 <semaforoEscravo>:
    while (1) 
    {
		
	}
}
void semaforoEscravo(int8_t received){
 170:	ff 92       	push	r15
 172:	0f 93       	push	r16
 174:	1f 93       	push	r17
 176:	cf 93       	push	r28
 178:	df 93       	push	r29
 17a:	cd b7       	in	r28, 0x3d	; 61
 17c:	de b7       	in	r29, 0x3e	; 62
 17e:	62 97       	sbiw	r28, 0x12	; 18
 180:	0f b6       	in	r0, 0x3f	; 63
 182:	f8 94       	cli
 184:	de bf       	out	0x3e, r29	; 62
 186:	0f be       	out	0x3f, r0	; 63
 188:	cd bf       	out	0x3d, r28	; 61
 18a:	f8 2e       	mov	r15, r24
	
	int16_t estados[9]={0b011110000,0b001110000,0b000110000,0b000010000,0b000001111,0b000000111,0b000000011,0b000000001,0b100000000};
 18c:	82 e1       	ldi	r24, 0x12	; 18
 18e:	e0 e0       	ldi	r30, 0x00	; 0
 190:	f1 e0       	ldi	r31, 0x01	; 1
 192:	de 01       	movw	r26, r28
 194:	11 96       	adiw	r26, 0x01	; 1
 196:	01 90       	ld	r0, Z+
 198:	0d 92       	st	X+, r0
 19a:	8a 95       	dec	r24
 19c:	e1 f7       	brne	.-8      	; 0x196 <semaforoEscravo+0x26>
	PORTB= estados[received] & 0b011111111;	//Mascara and apagando o led correspondente ao estado
 19e:	0f 2d       	mov	r16, r15
 1a0:	00 0f       	add	r16, r16
 1a2:	11 0b       	sbc	r17, r17
 1a4:	81 e0       	ldi	r24, 0x01	; 1
 1a6:	90 e0       	ldi	r25, 0x00	; 0
 1a8:	8c 0f       	add	r24, r28
 1aa:	9d 1f       	adc	r25, r29
 1ac:	08 0f       	add	r16, r24
 1ae:	19 1f       	adc	r17, r25
 1b0:	f8 01       	movw	r30, r16
 1b2:	80 81       	ld	r24, Z
 1b4:	85 b9       	out	0x05, r24	; 5
	acionaSinal(received);		//Aciona buzzer
 1b6:	8f 2d       	mov	r24, r15
 1b8:	0e 94 97 00 	call	0x12e	; 0x12e <acionaSinal>
	semaforoPedestre(received);
 1bc:	8f 2d       	mov	r24, r15
 1be:	0e 94 87 00 	call	0x10e	; 0x10e <semaforoPedestre>
	if(estados[received] & 0b100000000)
 1c2:	f8 01       	movw	r30, r16
 1c4:	80 81       	ld	r24, Z
 1c6:	91 81       	ldd	r25, Z+1	; 0x01
 1c8:	90 ff       	sbrs	r25, 0
 1ca:	04 c0       	rjmp	.+8      	; 0x1d4 <semaforoEscravo+0x64>
		PORTD |= 0b10000000;	//ligando amarelo
 1cc:	8b b1       	in	r24, 0x0b	; 11
 1ce:	80 68       	ori	r24, 0x80	; 128
 1d0:	8b b9       	out	0x0b, r24	; 11
 1d2:	03 c0       	rjmp	.+6      	; 0x1da <semaforoEscravo+0x6a>
	else
		PORTD &= 0b01111111;	//apagando amarelo
 1d4:	8b b1       	in	r24, 0x0b	; 11
 1d6:	8f 77       	andi	r24, 0x7F	; 127
 1d8:	8b b9       	out	0x0b, r24	; 11
	cameraSemaforo();
 1da:	0e 94 a2 00 	call	0x144	; 0x144 <cameraSemaforo>
}
 1de:	62 96       	adiw	r28, 0x12	; 18
 1e0:	0f b6       	in	r0, 0x3f	; 63
 1e2:	f8 94       	cli
 1e4:	de bf       	out	0x3e, r29	; 62
 1e6:	0f be       	out	0x3f, r0	; 63
 1e8:	cd bf       	out	0x3d, r28	; 61
 1ea:	df 91       	pop	r29
 1ec:	cf 91       	pop	r28
 1ee:	1f 91       	pop	r17
 1f0:	0f 91       	pop	r16
 1f2:	ff 90       	pop	r15
 1f4:	08 95       	ret

000001f6 <__vector_18>:

ISR(USART0_RX_vect){
 1f6:	1f 92       	push	r1
 1f8:	0f 92       	push	r0
 1fa:	0f b6       	in	r0, 0x3f	; 63
 1fc:	0f 92       	push	r0
 1fe:	11 24       	eor	r1, r1
 200:	2f 93       	push	r18
 202:	3f 93       	push	r19
 204:	4f 93       	push	r20
 206:	5f 93       	push	r21
 208:	6f 93       	push	r22
 20a:	7f 93       	push	r23
 20c:	8f 93       	push	r24
 20e:	9f 93       	push	r25
 210:	af 93       	push	r26
 212:	bf 93       	push	r27
 214:	ef 93       	push	r30
 216:	ff 93       	push	r31
		
	semaforoEscravo(UDR0-'0');	
 218:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 21c:	80 53       	subi	r24, 0x30	; 48
 21e:	0e 94 b8 00 	call	0x170	; 0x170 <semaforoEscravo>
}
 222:	ff 91       	pop	r31
 224:	ef 91       	pop	r30
 226:	bf 91       	pop	r27
 228:	af 91       	pop	r26
 22a:	9f 91       	pop	r25
 22c:	8f 91       	pop	r24
 22e:	7f 91       	pop	r23
 230:	6f 91       	pop	r22
 232:	5f 91       	pop	r21
 234:	4f 91       	pop	r20
 236:	3f 91       	pop	r19
 238:	2f 91       	pop	r18
 23a:	0f 90       	pop	r0
 23c:	0f be       	out	0x3f, r0	; 63
 23e:	0f 90       	pop	r0
 240:	1f 90       	pop	r1
 242:	18 95       	reti

00000244 <_exit>:
 244:	f8 94       	cli

00000246 <__stop_program>:
 246:	ff cf       	rjmp	.-2      	; 0x246 <__stop_program>
